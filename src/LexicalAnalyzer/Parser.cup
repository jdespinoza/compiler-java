package LexicalAnalyzer;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import Grammar.Expresion;
import Grammar.SymbolTable;
import Information.Code;
import Information.Textos;
import CodigoIntermedio.CodigoIntermedio;
import CodigoIntermedio.Cuadrupla;
import CodeGeneration.CodigoFinal;
import java.util.logging.Level;
import java.util.logging.Logger;

action code {:

    

    //boolean existeSimbolo(String id){
      //  return tabla.encontrarSimbolo(id);
    //}

    //void agregarSimbolo(String id, int dir...){
    //    return tabla.agregar(id, --contadorDireccion)
    //}
:}

parser code {:
    public boolean exito = false;
    public int countDir;
    SymbolTable table;
    Pila pilaIf;
    Pila pilaBucle;
    Lista listaCadenas;
    CodigoIntermedio codigoIntermedio;
    CodigoFinal codigoFinal;
    int cuentaWhile;
    int cuentaIf;
    int cuentaBucle;
    int cuentaCadenas;
    int cuentaFunciones;
    static String nombreFichero;

    public void init(){
        table = new SymbolTable();
        pilaIf = new Pila();
        pilaBucle = new Pila();
        listaCadenas = new Lista();
        cuentaWhile = 0;
        cuentaFunciones = 0;
        cuentaBucle = 0;
        cuentaIf = 0;
        cuentaCadenas = 0;
        countDir = 65534;
        String nombre = "prueba";
        codigoIntermedio = new CodigoIntermedio(nombre + ".ci");

        if (codigoIntermedio.abrirFicheroEscritura()){
            System.out.println("Archivo creado");
        }else{
            try {
                codigoIntermedio.cerrarFicheroEscritura();
            } catch (IOException ex) {
                Logger.getLogger(Parser.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public SymbolTable getTable(){
        return table;
    }
    public void generarCF(Cuadrupla[] x){
        codigoFinal = new CodigoFinal(x);
        codigoFinal.procesarCI_CF();
    }

    Expresion suma(Expresion e1, Expresion e2){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("SUMAR",
            String.valueOf(e1.getDireccion()),
            String.valueOf(e2.getDireccion()),
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion resta(Expresion e1, Expresion e2){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("RESTAR",
            String.valueOf(e1.getDireccion()),
            String.valueOf(e2.getDireccion()),
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion producto(Expresion e1, Expresion e2){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("MULTIPLICAR",
            String.valueOf(e1.getDireccion()),
            String.valueOf(e2.getDireccion()),
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion division(Expresion e1, Expresion e2){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("DIVIDIR",
            String.valueOf(e1.getDireccion()),
            String.valueOf(e2.getDireccion()),
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion entero(String e){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_VALOR",e,null,
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion identificador(String id){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_DIRECCION",
            String.valueOf(table.tablaSimbolos.get(id)),
            null, String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion or(Expresion c1, Expresion c2){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("OR",
            String.valueOf(c1.getDireccion()),
            String.valueOf(c2.getDireccion()),
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion and(Expresion c1, Expresion c2){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("AND",
            String.valueOf(c1.getDireccion()),
            String.valueOf(c2.getDireccion()),
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion mayor(Expresion e1, Expresion e2){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("MAYOR",
            String.valueOf(e1.getDireccion()),
            String.valueOf(e2.getDireccion()),
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion menor(Expresion e1, Expresion e2){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("MENOR",
            String.valueOf(e1.getDireccion()),
            String.valueOf(e2.getDireccion()),
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion igual(Expresion e1, Expresion e2){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("IGUAL",
            String.valueOf(e1.getDireccion()),
            String.valueOf(e2.getDireccion()),
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion distinto(Expresion e1, Expresion e2){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("DISTINTO",
            String.valueOf(e1.getDireccion()),
            String.valueOf(e2.getDireccion()),
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    void asignacion(String id, Expresion e){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_DIRECCION",
            String.valueOf(e.getDireccion()),null,
            String.valueOf((table.tablaSimbolos.get(id)))));
    }

    void cerrarCI(){
        try {
            codigoIntermedio.cerrarFicheroEscritura();
        } catch (IOException ex) {
            Logger.getLogger(Parser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void condicion(Expresion e, int n, int linea){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "SALTAR_CONDICION",
            String.valueOf(e.getDireccion()),
            String.valueOf(linea),
            "ELSE_" + String.valueOf(n)));
    }

    void saltarEtiqueta(String eti, int n){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "SALTAR_Etiqueta",
            null,
            null,
            eti + "_" + String.valueOf(n)));
    }
    void saltarEtiqueta2(String eti, int n, int linea){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "SALTAR_Etiqueta2",
            String.valueOf(linea),
            null,
            eti + "_" + String.valueOf(n)));
    }

    void ponerEtiquetaInicio(String eti, int n, int linea){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "ETIQUETA_INICIO",
            String.valueOf(linea),
            null,
            eti + "_" + String.valueOf(n)));
    }

    void ponerEtiquetaMain(){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "MAIN",
            null,
            null,
            null));
    }

    void ponerEtiquetaFuncion(String eti, int n, int linea){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "FUNCION",
            String.valueOf(linea),
            null,
            eti));
    }

    void ponerEtiqueta(String eti, int n){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "ETIQUETA",
            null,
            null,
            eti + "_" + String.valueOf(n)));
    }

    void llamada(String eti){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "LLAMADA",
            null,
            null,
            eti));
    }

    void condicion2(Expresion e, int n, int linea){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "SALTAR_CONDICION2",
            String.valueOf(e.getDireccion()),
            String.valueOf(linea),
            "FINBUCLE_" + String.valueOf(n)));
    }

    void imprimirW(Expresion e){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "IMPRIMIR_ENTERO",
            String.valueOf(e.getDireccion()),
            null,
            null));
    }

    void imprimirS(String c, int cuenta){
        listaCadenas.addCadena(c);
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "IMPRIMIR_CADENA",
            "CADENA_"+String.valueOf(cuenta),
            null,
            null));
    }

    void generarCadenas(){
        for(int i = 0; i < listaCadenas.size(); i++){
            codigoIntermedio.guardarCuadrupla(new Cuadrupla(
                "PONER_CADENA",
                "CADENA_"+String.valueOf(i+1),
                null,
                listaCadenas.getCadena(i)));
        }
    }

    void finPrograma() {
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "FIN",
            null,
            null,
            null));
    }

	public void report_error(String message) {
		
	}

	public void syntax_error(Symbol s) {
		
	}

	public void report_fatal_error(String message, Object info) {
		
	}

	public void unrecovered_syntax_error(Symbol s) {
	}

	public void error(String message) {
            report_error("ERROR -> Linea: "+Code.line+" Lexema: "+Code.token+" "+message);
	}

:}

terminal LPAREN, RPAREN, PTOCOMA, SUMA, RESTA, PRODUCTO, DIVISION, MENOR, MAYOR, IGUAL, DISTINTO; 
terminal OR, AND, ASIGNAR, LLLAVE, RLLAVE, INT, MAIN, IF, ELSE, WHILE, PUTS, PUTW, EMPTY, FUNCTION, END; 
terminal BREAK;
terminal String ID;
terminal String ENTERO;
terminal String CADENATEXTO;

non terminal Programa, Declaraciones, Cuerpo;
non terminal Declaracion;
non terminal BloqueSentencias;
non terminal Sentencias, Sentencia;
non terminal Expresion Expresion;
non terminal Expresion Condicion;
non terminal SentIf, SentElse;
non terminal SentWhile;
non terminal SentAsignacion;
non terminal SentPutw, SentPuts;
non terminal SentBreak;

precedence left ASIGNAR;
precedence left OR, AND;
precedence left IGUAL, DISTINTO, MAYOR, MENOR;     
precedence left SUMA, RESTA;
precedence left PRODUCTO, DIVISION;
precedence left LPAREN, RPAREN;
precedence left ELSE;

//indica con cual empezar
start with Programa;

Programa ::=  Declaraciones:d Cuerpo:c 
            {:
                System.out.println("sin problemas");
            :}
                | Cuerpo:c
            {:
                System.out.println("sin problemas");
            :};

Declaraciones ::= Declaracion:d Declaraciones 
                {:
System.out.println("declaraciones");
                RESULT = d;
                :}
                | Declaracion:d
                {: 
                RESULT = d;
                System.out.println("declaracion");
                :};

Declaracion ::= INT ID:id PTOCOMA
                {:
                    System.out.println("ejecuto int x;");
                    //preguntar  si existe id
                    if (table.checkInt(id)){
                        parser.error(Textos.simboloRedeclarado);
                    }else{
                        System.out.println("inserto variable");
                        table.addType("int", id);
                        table.addTablaSimbolo(id, countDir--);
                    }
                    RESULT = id;
                :}
                | FUNCTION:f ID:id LLLAVE BloqueSentencias:b RLLAVE
                {:
                    if (table.checkFuncion(id)){
                        System.err.println("Error: hay 2 o mas funciones con el mismo nombre");
                    }else{
                        cuentaFunciones++;
                        table.addFuncion(id);
                        ponerEtiquetaFuncion(id, cuentaFunciones, fleft);
                    }
                :}
                | END
                {:
                    ponerEtiquetaMain();
                :};

Cuerpo ::= MAIN LPAREN RPAREN LLLAVE BloqueSentencias:b RLLAVE
            {:
                System.out.println("Main");
                finPrograma();
                generarCadenas();
                cerrarCI();
                //genera codigo fuente
                generarCF(codigoIntermedio.getCIordenado());
            :};

BloqueSentencias ::= Sentencias:s
                {:
                :}
                | EMPTY
                {:
                    System.out.println("limpio bloquesentencias");
                :};

Sentencias ::= Sentencias:s1 Sentencia:s2 
                {:
                    RESULT = s1;
                :}
                | Sentencia:s
                {:
                    RESULT = s;
                :};

Expresion ::= Expresion:e1 SUMA Expresion:e2 
                {:
                    RESULT = suma(e1, e2);
                :}
            | Expresion:e1 RESTA Expresion:e2 
                {:
                    RESULT = resta(e1, e2);
                :}
           |  Expresion:e1 PRODUCTO Expresion:e2 
                {:
                    RESULT = producto(e1, e2);
                :}
           |  Expresion:e1 DIVISION Expresion:e2 
                {:
                    RESULT = division(e1, e2);
                :}
           |    ENTERO:e 
                {:
                    RESULT = entero(e);
                :}
           |    ID:id 
                {:
                    if (!table.checkInt(id)){
                        parser.error(Textos.simboloNoDeclarado);
                        RESULT = identificador(null);
                    }else {
                        RESULT = identificador(id);
                    }
                :}
           |    LPAREN Expresion:e RPAREN 
                {:
                    RESULT = e;
                :};

Condicion ::= Condicion:c1 OR Condicion:c2 
                {:
                    RESULT = or(c1, c2);
                :}
	   |  Condicion:c1 AND Condicion:c2
		{:
                    RESULT = and(c1, c2);        
		:}
           |  Expresion:e1 IGUAL Expresion:e2 
		{:
                    RESULT = igual(e1,e2);
		:}
	   | Expresion:e1 DISTINTO Expresion:e2
		{:
                    RESULT = distinto(e1,e2); 
		:}
           | Expresion:e1 MAYOR Expresion:e2
		{:
                    RESULT = mayor(e1,e2);
		:}
	   | Expresion:e1 MENOR Expresion:e2
		{:
                    RESULT = menor(e1,e2);
		:}
       	   | LPAREN Condicion:c RPAREN
		{:
                    RESULT = c;
		:};

SentIf ::= IF:f LPAREN Condicion:c RPAREN LLLAVE BloqueSentencias:b RLLAVE SentElse:s
	{:
                condicion(c, pilaIf.getTop(), fleft+15);
                pilaIf.pop();
                RESULT = b;
	:};

SentElse ::= ELSE:e LLLAVE BloqueSentencias:b RLLAVE
               {:
                cuentaIf++;
                pilaIf.push(cuentaIf);
                cuentaIf++;
                pilaIf.push(cuentaIf);

                //condicion(c, pilaIf.getTop());

                System.out.println("IF adentro");
                saltarEtiqueta2("FINIF", pilaIf.getTop()-1, eleft+15);
                ponerEtiquetaInicio("ELSE", pilaIf.getTop()-1,eleft+16);
                    ponerEtiquetaInicio("FINIF", pilaIf.getTop()-1, eleft+18);
                    pilaIf.pop();
                :}
            | EMPTY
                {:
                    cuentaIf++;
                pilaIf.push(cuentaIf);

                //condicion(c, pilaIf.getTop());

                System.out.println("IF adentro");
                saltarEtiqueta("FINIF", pilaIf.getTop());
                //ponerEtiqueta("ELSE", pilaIf.getTop());
                    ponerEtiqueta("FINIF", pilaIf.getTop());
                    pilaIf.pop();
                :};

SentWhile ::= WHILE:w LPAREN Condicion:c RPAREN LLLAVE BloqueSentencias:b RLLAVE 
		{:
                    cuentaBucle++;
                    pilaBucle.push(cuentaBucle);
                    ponerEtiquetaInicio("BUCLE", pilaBucle.getTop(), wleft);
                    System.out.println("while");

                    System.out.println("whileCondicion");
                    condicion2(c, pilaBucle.getTop(), wleft + 4);

                    cuentaWhile++;
                    saltarEtiqueta("BUCLE", pilaBucle.getTop());
                    ponerEtiqueta("FINBUCLE", pilaBucle.getTop());
                    pilaBucle.pop();
                    RESULT = b;
		:};

SentAsignacion ::= ID:id ASIGNAR Expresion:e PTOCOMA
                    {:
                        if (!table.checkInt(id)){
                        parser.error(Textos.simboloNoDeclarado);
                        }else{
                            System.out.println("id2");
                            asignacion(id, e);
                            RESULT = e;
                        }
                    :};

SentPutw ::= PUTW LPAREN Expresion:e RPAREN PTOCOMA
                    {:  
                        System.out.println("putw");
                        imprimirW(e);
                        RESULT = e;
                    :};

SentPuts ::= PUTS LPAREN CADENATEXTO:c RPAREN PTOCOMA
                    {:
                        System.out.println("puts");
                        cuentaCadenas++;
                        imprimirS(c, cuentaCadenas);
                        RESULT = c;
                    :};

SentBreak ::= BREAK:b PTOCOMA
                    {:  
                        cuentaWhile--;
                        if (cuentaWhile>0){
                        } else {
                            parser.error(Textos.breakSinWhile);
                        }
                        RESULT = b;
                    :};

Sentencia ::= SentIf:s
            {:
                RESULT = s;
            :}
            | SentWhile:s
            {:
                RESULT = s;
            :}
            | SentAsignacion:s
            {:
                RESULT = s;
            :}
            | SentPutw:s
            {:
                RESULT = s;
            :}
            | SentPuts:s
            {:
                RESULT = s;
            :}
            | SentBreak:s
            {:
                RESULT = s;
            :}
            | ID:id LPAREN RPAREN PTOCOMA
            {:
                if (table.checkFuncion(id)){
                    llamada(id);
                }else{
                    System.err.println("Error: La funcion no se encuentra");
                }
                RESULT = id;
            :};