package LexicalAnalyzer;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import Grammar.Expresion;
import Grammar.SymbolTable;
import Information.Code;
import Information.Textos;

action code {:

    //boolean existeSimbolo(String id){
      //  return tabla.encontrarSimbolo(id);
    //}

    //void agregarSimbolo(String id, int dir...){
    //    return tabla.agregar(id, --contadorDireccion)
    //}
:}

parser code {:
    public boolean exito = false;
    public int countDir;
    SymbolTable table;
    int cuentaWhile;

	//static String nombreFichero;

    public void init(){
        table = new SymbolTable();
        cuentaWhile = 0;
        countDir = 65536;
    }
	public void report_error(String message) {
		
	}

	public void syntax_error(Symbol s) {
		
	}

	public void report_fatal_error(String message, Object info) {
		
	}

	public void unrecovered_syntax_error(Symbol s) {
	}

	public void error(String message) {
            report_error("ERROR -> Linea: "+Code.line+" Lexema: "+Code.token+" "+message);
	}

:}

terminal LPAREN, RPAREN, PTOCOMA, SUMA, RESTA, PRODUCTO, DIVISION, MENOR, MAYOR, IGUAL, DISTINTO; 
terminal OR, AND, ASIGNAR, LLLAVE, RLLAVE, INT, MAIN, IF, ELSE, WHILE, PUTS, PUTW; 
terminal BREAK;
terminal String ID;
terminal String ENTERO;
terminal String CADENATEXTO;

non terminal Programa, Declaraciones, Cuerpo;
non terminal Declaracion;
non terminal BloqueSentencias;
non terminal Sentencias, Sentencia;
non terminal Expresion Expresion;
non terminal Expresion Condicion;
non terminal SentIf, SentElse;
non terminal SentWhile;
non terminal SentAsignacion;
non terminal SentPutw, SentPuts;
non terminal SentBreak;

precedence left ASIGNAR;
precedence left OR, AND;
precedence left IGUAL, DISTINTO, MAYOR, MENOR;     
precedence left SUMA, RESTA;
precedence left PRODUCTO, DIVISION;
precedence left LPAREN, RPAREN;
precedence left ELSE;

//indica con cual empezar
start with Programa;

Programa ::=  Declaraciones:d Cuerpo:c 
            {:
                System.out.println("sin problemas");
            :}
                | Cuerpo:c
            {:
                System.out.println("sin problemas");
            :};

Declaraciones ::= Declaracion:d Declaraciones 
                {:
System.out.println("declaracion");
                RESULT = d;
                :}
                | Declaracion:d
                {: 
                RESULT = d;
                System.out.println("declaracion");
                :};

Declaracion ::= INT ID:id PTOCOMA
                {:
                    System.out.println("ejecuto int x;");
                    //preguntar  si existe id
                    if (table.checkInt(id)){
                        parser.error(Textos.simboloRedeclarado);
                    }else{
                        table.addType("int", id);
                    }
                    RESULT = id;
                :};

Cuerpo ::= MAIN LPAREN RPAREN LLLAVE BloqueSentencias RLLAVE
            {:
            :};

BloqueSentencias ::= Sentencias
                {:
                :}
                |  
                {:
                :};

Sentencias ::= Sentencias Sentencia 
                {:
                :}
                | Sentencia
                {:
                :};

Expresion ::= Expresion:e1 SUMA Expresion:e2 
                {:

                :}
            | Expresion:e1 RESTA Expresion:e2 
                {:

                :}
           |  Expresion:e1 PRODUCTO Expresion:e2 
                {:

                :}
           |  Expresion:e1 DIVISION Expresion:e2 
                {:

                :}
           |    ENTERO:e 
                {:
                    
                :}
           |    ID:id 
                {:
                    if (!table.checkInt(id)){
                        parser.error(Textos.simboloNoDeclarado);
                    }
                :}
           |    LPAREN Expresion:e RPAREN 
                {:

                :};

Condicion ::= Expresion OR Expresion 
                {:

                :}
	   |  Expresion AND Expresion
		{:
                            
		:}
           |  Expresion IGUAL Expresion 
		{:
                            
		:}
	   | Expresion DISTINTO Expresion
		{:
                            
		:}
           | Expresion MAYOR Expresion
		{:
                            
		:}
	   | Expresion MENOR Expresion
		{:
                            
		:}
       	   | LPAREN Condicion:c RPAREN
		{:
                            
		:};

SentIf ::= IF LPAREN 
        {:
				
	:}
          |  Condicion:c 
	{:
				
	:}
           | RPAREN LLLAVE BloqueSentencias RLLAVE 
	{:
				
	:}
          |  SentElse
	{:
				
	:};

SentElse ::= ELSE LLLAVE BloqueSentencias RLLAVE 
;

SentWhile ::= WHILE LPAREN 
		{:
				
		:}
		Condicion:c
		{:
				
		:} 
		RPAREN LLLAVE 
		{:
                    cuentaWhile++;
		:}
		BloqueSentencias 
		{:
                    cuentaWhile--;
		:}
		RLLAVE
		{:
                    
		:};

SentAsignacion ::= ID:id 
                    {:
                      
                    if (!table.checkInt(id)){
                        parser.error(Textos.simboloNoDeclarado);
                    }
                    :} 
                 | ID:id ASIGNAR Expresion:e PTOCOMA
                    {:

                    :};

SentPutw ::= PUTW LPAREN Expresion:e 
                    {:

                    :}
	     RPAREN PTOCOMA
                    {:
                    :};

SentPuts ::= PUTS LPAREN CADENATEXTO:c
                    {:

                    :}
	     RPAREN PTOCOMA
                    {:
                    :};

SentBreak ::= BREAK 
                    {:
                        if (cuentaWhile>0){
                        } else {
                            parser.error(Textos.breakSinWhile);
                        }
                    :}
	      PTOCOMA
                    {:
                    :};

Sentencia ::= SentIf 
            {:
            :}
            | SentWhile
            {:
            :}
            | SentAsignacion
            {:
            :}
            | SentPutw
            {:
            :}
            | SentPuts
            {:
            :}
            | SentBreak
            {:
            :};