
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package LexicalAnalyzer;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import Grammar.Expresion;
import Grammar.SymbolTable;
import Information.Code;
import Information.Textos;
import CodigoIntermedio.CodigoIntermedio;
import CodigoIntermedio.Cuadrupla;
import CodeGeneration.CodigoFinal;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\005\005" +
    "\000\002\005\007\000\002\005\003\000\002\004\010\000" +
    "\002\006\003\000\002\006\003\000\002\007\004\000\002" +
    "\007\003\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\003\000\002\011\003" +
    "\000\002\011\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\013\012\000\002\014" +
    "\006\000\002\014\003\000\002\015\011\000\002\016\006" +
    "\000\002\017\007\000\002\020\007\000\002\021\004\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\012\024\013\025\006\034\010\035\011\001" +
    "\002\000\004\002\150\001\002\000\004\025\006\001\002" +
    "\000\004\004\142\001\002\000\012\024\013\025\ufffd\034" +
    "\010\035\011\001\002\000\004\037\016\001\002\000\012" +
    "\024\ufffa\025\ufffa\034\ufffa\035\ufffa\001\002\000\004\002" +
    "\uffff\001\002\000\004\037\014\001\002\000\004\006\015" +
    "\001\002\000\012\024\ufffc\025\ufffc\034\ufffc\035\ufffc\001" +
    "\002\000\004\022\017\001\002\000\020\026\027\030\021" +
    "\031\034\032\031\033\022\036\037\037\032\001\002\000" +
    "\004\023\140\001\002\000\004\004\132\001\002\000\004" +
    "\023\ufff7\001\002\000\020\023\uffd9\026\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\036\uffd9\037\uffd9\001\002\000\020\023\uffdd" +
    "\026\uffdd\030\uffdd\031\uffdd\032\uffdd\036\uffdd\037\uffdd\001" +
    "\002\000\020\023\ufff5\026\ufff5\030\ufff5\031\ufff5\032\ufff5" +
    "\036\ufff5\037\ufff5\001\002\000\020\023\uffde\026\uffde\030" +
    "\uffde\031\uffde\032\uffde\036\uffde\037\uffde\001\002\000\004" +
    "\004\075\001\002\000\020\023\uffdb\026\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\036\uffdb\037\uffdb\001\002\000\004\004\071" +
    "\001\002\000\006\004\046\021\047\001\002\000\020\023" +
    "\uffda\026\uffda\030\uffda\031\uffda\032\uffda\036\uffda\037\uffda" +
    "\001\002\000\004\004\042\001\002\000\020\023\ufff8\026" +
    "\027\030\021\031\034\032\031\036\037\037\032\001\002" +
    "\000\020\023\uffdc\026\uffdc\030\uffdc\031\uffdc\032\uffdc\036" +
    "\uffdc\037\uffdc\001\002\000\004\006\040\001\002\000\020" +
    "\023\uffdf\026\uffdf\030\uffdf\031\uffdf\032\uffdf\036\uffdf\037" +
    "\uffdf\001\002\000\020\023\ufff6\026\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\036\ufff6\037\ufff6\001\002\000\004\041\043\001" +
    "\002\000\004\005\044\001\002\000\004\006\045\001\002" +
    "\000\020\023\uffe0\026\uffe0\030\uffe0\031\uffe0\032\uffe0\036" +
    "\uffe0\037\uffe0\001\002\000\004\005\067\001\002\000\010" +
    "\004\051\037\050\040\052\001\002\000\032\005\uffef\006" +
    "\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\020\uffef\001\002\000\010\004" +
    "\051\037\050\040\052\001\002\000\032\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\001\002\000\014\006\055" +
    "\007\056\010\054\011\060\012\057\001\002\000\010\004" +
    "\051\037\050\040\052\001\002\000\020\023\uffe2\026\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\036\uffe2\037\uffe2\001\002\000" +
    "\010\004\051\037\050\040\052\001\002\000\010\004\051" +
    "\037\050\040\052\001\002\000\010\004\051\037\050\040" +
    "\052\001\002\000\032\005\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\001\002\000\032\005\ufff1\006\ufff1\007\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\001\002\000\032\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\060\012\057\013\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\001\002\000\032\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\060\012\057\013\ufff3\014" +
    "\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\001\002\000\014" +
    "\005\066\007\056\010\054\011\060\012\057\001\002\000" +
    "\032\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee" +
    "\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\001" +
    "\002\000\004\006\070\001\002\000\020\023\uffd8\026\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\036\uffd8\037\uffd8\001\002\000" +
    "\010\004\051\037\050\040\052\001\002\000\014\005\073" +
    "\007\056\010\054\011\060\012\057\001\002\000\004\006" +
    "\074\001\002\000\020\023\uffe1\026\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\036\uffe1\037\uffe1\001\002\000\010\004\077\037" +
    "\050\040\052\001\002\000\010\005\120\017\115\020\114" +
    "\001\002\000\010\004\077\037\050\040\052\001\002\000" +
    "\022\007\056\010\054\011\060\012\057\013\103\014\104" +
    "\015\101\016\102\001\002\000\010\004\051\037\050\040" +
    "\052\001\002\000\010\004\051\037\050\040\052\001\002" +
    "\000\010\004\051\037\050\040\052\001\002\000\010\004" +
    "\051\037\050\040\052\001\002\000\020\005\uffe9\007\056" +
    "\010\054\011\060\012\057\017\uffe9\020\uffe9\001\002\000" +
    "\020\005\uffe8\007\056\010\054\011\060\012\057\017\uffe8" +
    "\020\uffe8\001\002\000\020\005\uffea\007\056\010\054\011" +
    "\060\012\057\017\uffea\020\uffea\001\002\000\020\005\uffeb" +
    "\007\056\010\054\011\060\012\057\017\uffeb\020\uffeb\001" +
    "\002\000\010\005\113\017\115\020\114\001\002\000\024" +
    "\005\066\007\056\010\054\011\060\012\057\013\103\014" +
    "\104\015\101\016\102\001\002\000\010\005\uffe7\017\uffe7" +
    "\020\uffe7\001\002\000\010\004\077\037\050\040\052\001" +
    "\002\000\010\004\077\037\050\040\052\001\002\000\010" +
    "\005\uffed\017\uffed\020\uffed\001\002\000\010\005\uffec\017" +
    "\uffec\020\uffec\001\002\000\004\022\121\001\002\000\020" +
    "\026\027\030\021\031\034\032\031\033\022\036\037\037" +
    "\032\001\002\000\004\023\123\001\002\000\006\027\125" +
    "\033\126\001\002\000\020\023\uffe6\026\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\036\uffe6\037\uffe6\001\002\000\004\022\127" +
    "\001\002\000\020\023\uffe4\026\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\036\uffe4\037\uffe4\001\002\000\020\026\027\030\021" +
    "\031\034\032\031\033\022\036\037\037\032\001\002\000" +
    "\004\023\131\001\002\000\020\023\uffe5\026\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\036\uffe5\037\uffe5\001\002\000\010\004" +
    "\077\037\050\040\052\001\002\000\010\005\134\017\115" +
    "\020\114\001\002\000\004\022\135\001\002\000\020\026" +
    "\027\030\021\031\034\032\031\033\022\036\037\037\032" +
    "\001\002\000\004\023\137\001\002\000\020\023\uffe3\026" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\036\uffe3\037\uffe3\001\002" +
    "\000\012\024\ufffb\025\ufffb\034\ufffb\035\ufffb\001\002\000" +
    "\004\025\ufffe\001\002\000\004\005\143\001\002\000\004" +
    "\022\144\001\002\000\020\026\027\030\021\031\034\032" +
    "\031\033\022\036\037\037\032\001\002\000\004\023\146" +
    "\001\002\000\004\002\ufff9\001\002\000\004\002\000\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\012\002\003\003\004\004\011\005\006\001" +
    "\001\000\002\001\001\000\004\004\146\001\001\000\002" +
    "\001\001\000\006\003\140\005\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\017\007\034\010\024\013\025\015\023\016\035" +
    "\017\027\020\032\021\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\010\040\013" +
    "\025\015\023\016\035\017\027\020\032\021\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\052\001\001\000\002\001\001\000\004\011\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\063\001" +
    "\001\000\002\001\001\000\004\011\062\001\001\000\004" +
    "\011\061\001\001\000\004\011\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\077\012" +
    "\075\001\001\000\002\001\001\000\006\011\111\012\110" +
    "\001\001\000\002\001\001\000\004\011\107\001\001\000" +
    "\004\011\106\001\001\000\004\011\105\001\001\000\004" +
    "\011\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\077\012\116\001" +
    "\001\000\006\011\077\012\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\121\007" +
    "\034\010\024\013\025\015\023\016\035\017\027\020\032" +
    "\021\022\001\001\000\002\001\001\000\004\014\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\006\127\007\034\010\024\013\025\015\023\016" +
    "\035\017\027\020\032\021\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\077\012\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\135\007\034" +
    "\010\024\013\025\015\023\016\035\017\027\020\032\021" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\144\007\034\010\024\013\025\015\023" +
    "\016\035\017\027\020\032\021\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean exito = false;
    public int countDir;
    SymbolTable table;
    Pila pilaIf;
    Pila pilaBucle;
    Lista listaCadenas;
    CodigoIntermedio codigoIntermedio;
    CodigoFinal codigoFinal;
    int cuentaWhile;
    int cuentaIf;
    int cuentaBucle;
    int cuentaCadenas;
    int cuentaFunciones;
    static String nombreFichero;

    public void init(){
        table = new SymbolTable();
        pilaIf = new Pila();
        pilaBucle = new Pila();
        listaCadenas = new Lista();
        cuentaWhile = 0;
        cuentaFunciones = 0;
        cuentaBucle = 0;
        cuentaIf = 0;
        cuentaCadenas = 0;
        countDir = 65534;
        String nombre = "prueba";
        codigoIntermedio = new CodigoIntermedio(nombre + ".ci");

        if (codigoIntermedio.abrirFicheroEscritura()){
            System.out.println("Archivo creado");
        }else{
            try {
                codigoIntermedio.cerrarFicheroEscritura();
            } catch (IOException ex) {
                Logger.getLogger(Parser.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public SymbolTable getTable(){
        return table;
    }
    public void generarCF(Cuadrupla[] x){
        codigoFinal = new CodigoFinal(x);
        codigoFinal.procesarCI_CF();
    }

    Expresion suma(Expresion e1, Expresion e2){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("SUMAR",
            String.valueOf(e1.getDireccion()),
            String.valueOf(e2.getDireccion()),
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion resta(Expresion e1, Expresion e2){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("RESTAR",
            String.valueOf(e1.getDireccion()),
            String.valueOf(e2.getDireccion()),
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion producto(Expresion e1, Expresion e2){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("MULTIPLICAR",
            String.valueOf(e1.getDireccion()),
            String.valueOf(e2.getDireccion()),
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion division(Expresion e1, Expresion e2){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("DIVIDIR",
            String.valueOf(e1.getDireccion()),
            String.valueOf(e2.getDireccion()),
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion entero(String e){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_VALOR",e,null,
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion identificador(String id){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_DIRECCION",
            String.valueOf(table.tablaSimbolos.get(id)),
            null, String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion or(Expresion c1, Expresion c2){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("OR",
            String.valueOf(c1.getDireccion()),
            String.valueOf(c2.getDireccion()),
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion and(Expresion c1, Expresion c2){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("AND",
            String.valueOf(c1.getDireccion()),
            String.valueOf(c2.getDireccion()),
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion mayor(Expresion e1, Expresion e2){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("MAYOR",
            String.valueOf(e1.getDireccion()),
            String.valueOf(e2.getDireccion()),
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion menor(Expresion e1, Expresion e2){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("MENOR",
            String.valueOf(e1.getDireccion()),
            String.valueOf(e2.getDireccion()),
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion igual(Expresion e1, Expresion e2){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("IGUAL",
            String.valueOf(e1.getDireccion()),
            String.valueOf(e2.getDireccion()),
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    Expresion distinto(Expresion e1, Expresion e2){
        countDir--;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("DISTINTO",
            String.valueOf(e1.getDireccion()),
            String.valueOf(e2.getDireccion()),
            String.valueOf(countDir)));
        return new Expresion(countDir);
    }

    void asignacion(String id, Expresion e){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_DIRECCION",
            String.valueOf(e.getDireccion()),null,
            String.valueOf((table.tablaSimbolos.get(id)))));
    }

    void cerrarCI(){
        try {
            codigoIntermedio.cerrarFicheroEscritura();
        } catch (IOException ex) {
            Logger.getLogger(Parser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void condicion(Expresion e, int n, int linea){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "SALTAR_CONDICION",
            String.valueOf(e.getDireccion()),
            String.valueOf(linea),
            "ELSE_" + String.valueOf(n)));
    }

    void saltarEtiqueta(String eti, int n){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "SALTAR_Etiqueta",
            null,
            null,
            eti + "_" + String.valueOf(n)));
    }
    void saltarEtiqueta2(String eti, int n, int linea){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "SALTAR_Etiqueta2",
            String.valueOf(linea),
            null,
            eti + "_" + String.valueOf(n)));
    }

    void ponerEtiquetaInicio(String eti, int n, int linea){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "ETIQUETA_INICIO",
            String.valueOf(linea),
            null,
            eti + "_" + String.valueOf(n)));
    }

    void ponerEtiquetaMain(){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "MAIN",
            null,
            null,
            null));
    }

    void ponerEtiquetaFuncion(String eti, int n, int linea){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "FUNCION",
            String.valueOf(linea),
            null,
            eti));
    }

    void ponerEtiqueta(String eti, int n){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "ETIQUETA",
            null,
            null,
            eti + "_" + String.valueOf(n)));
    }

    void llamada(String eti){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "LLAMADA",
            null,
            null,
            eti));
    }

    void condicion2(Expresion e, int n, int linea){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "SALTAR_CONDICION2",
            String.valueOf(e.getDireccion()),
            String.valueOf(linea),
            "FINBUCLE_" + String.valueOf(n)));
    }

    void imprimirW(Expresion e){
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "IMPRIMIR_ENTERO",
            String.valueOf(e.getDireccion()),
            null,
            null));
    }

    void imprimirS(String c, int cuenta){
        listaCadenas.addCadena(c);
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "IMPRIMIR_CADENA",
            "CADENA_"+String.valueOf(cuenta),
            null,
            null));
    }

    void generarCadenas(){
        for(int i = 0; i < listaCadenas.size(); i++){
            codigoIntermedio.guardarCuadrupla(new Cuadrupla(
                "PONER_CADENA",
                "CADENA_"+String.valueOf(i+1),
                null,
                listaCadenas.getCadena(i)));
        }
    }

    void finPrograma() {
        codigoIntermedio.guardarCuadrupla(new Cuadrupla(
            "FIN",
            null,
            null,
            null));
    }

	public void report_error(String message) {
		
	}

	public void syntax_error(Symbol s) {
		
	}

	public void report_fatal_error(String message, Object info) {
		
	}

	public void unrecovered_syntax_error(Symbol s) {
	}

	public void error(String message) {
            report_error("ERROR -> Linea: "+Code.line+" Lexema: "+Code.token+" "+message);
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



    

    //boolean existeSimbolo(String id){
      //  return tabla.encontrarSimbolo(id);
    //}

    //void agregarSimbolo(String id, int dir...){
    //    return tabla.agregar(id, --contadorDireccion)
    //}

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Declaraciones Cuerpo 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                System.out.println("sin problemas");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= Cuerpo 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                System.out.println("sin problemas");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declaraciones ::= Declaracion Declaraciones 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
System.out.println("declaraciones");
                RESULT = d;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declaraciones ::= Declaracion 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = d;
                System.out.println("declaracion");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaracion ::= INT ID PTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    System.out.println("ejecuto int x;");
                    //preguntar  si existe id
                    if (table.checkInt(id)){
                        parser.error(Textos.simboloRedeclarado);
                    }else{
                        System.out.println("inserto variable");
                        table.addType("int", id);
                        table.addTablaSimbolo(id, countDir--);
                    }
                    RESULT = id;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaracion ::= FUNCTION ID LLLAVE BloqueSentencias RLLAVE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    if (table.checkFuncion(id)){
                        System.err.println("Error: hay 2 o mas funciones con el mismo nombre");
                    }else{
                        cuentaFunciones++;
                        table.addFuncion(id);
                        ponerEtiquetaFuncion(id, cuentaFunciones, fleft);
                    }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaracion ::= END 
            {
              Object RESULT =null;
		
                    ponerEtiquetaMain();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Cuerpo ::= MAIN LPAREN RPAREN LLLAVE BloqueSentencias RLLAVE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                System.out.println("Main");
                finPrograma();
                generarCadenas();
                cerrarCI();
                //genera codigo fuente
                generarCF(codigoIntermedio.getCIordenado());
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cuerpo",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BloqueSentencias ::= Sentencias 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueSentencias",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BloqueSentencias ::= EMPTY 
            {
              Object RESULT =null;
		
                    System.out.println("limpio bloquesentencias");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueSentencias",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sentencias ::= Sentencias Sentencia 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = s1;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencias",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sentencias ::= Sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = s;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencias",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expresion ::= Expresion SUMA Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = suma(e1, e2);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expresion ::= Expresion RESTA Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = resta(e1, e2);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expresion ::= Expresion PRODUCTO Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = producto(e1, e2);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expresion ::= Expresion DIVISION Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = division(e1, e2);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expresion ::= ENTERO 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = entero(e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expresion ::= ID 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if (!table.checkInt(id)){
                        parser.error(Textos.simboloNoDeclarado);
                        RESULT = identificador(null);
                    }else {
                        RESULT = identificador(id);
                    }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expresion ::= LPAREN Expresion RPAREN 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = e;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Condicion ::= Condicion OR Condicion 
            {
              Expresion RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion c1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = or(c1, c2);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Condicion ::= Condicion AND Condicion 
            {
              Expresion RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion c1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = and(c1, c2);        
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Condicion ::= Expresion IGUAL Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = igual(e1,e2);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Condicion ::= Expresion DISTINTO Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = distinto(e1,e2); 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Condicion ::= Expresion MAYOR Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = mayor(e1,e2);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Condicion ::= Expresion MENOR Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = menor(e1,e2);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Condicion ::= LPAREN Condicion RPAREN 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = c;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SentIf ::= IF LPAREN Condicion RPAREN LLLAVE BloqueSentencias RLLAVE SentElse 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                condicion(c, pilaIf.getTop(), fleft+15);
                pilaIf.pop();
                RESULT = b;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SentIf",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SentElse ::= ELSE LLLAVE BloqueSentencias RLLAVE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                cuentaIf++;
                pilaIf.push(cuentaIf);
                cuentaIf++;
                pilaIf.push(cuentaIf);

                //condicion(c, pilaIf.getTop());

                System.out.println("IF adentro");
                saltarEtiqueta2("FINIF", pilaIf.getTop()-1, eleft+15);
                ponerEtiquetaInicio("ELSE", pilaIf.getTop()-1,eleft+16);
                    ponerEtiquetaInicio("FINIF", pilaIf.getTop()-1, eleft+18);
                    pilaIf.pop();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SentElse",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SentElse ::= EMPTY 
            {
              Object RESULT =null;
		
                    cuentaIf++;
                pilaIf.push(cuentaIf);

                //condicion(c, pilaIf.getTop());

                System.out.println("IF adentro");
                saltarEtiqueta("FINIF", pilaIf.getTop());
                //ponerEtiqueta("ELSE", pilaIf.getTop());
                    ponerEtiqueta("FINIF", pilaIf.getTop());
                    pilaIf.pop();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SentElse",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SentWhile ::= WHILE LPAREN Condicion RPAREN LLLAVE BloqueSentencias RLLAVE 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    cuentaBucle++;
                    pilaBucle.push(cuentaBucle);
                    ponerEtiquetaInicio("BUCLE", pilaBucle.getTop(), wleft);
                    System.out.println("while");

                    System.out.println("whileCondicion");
                    condicion2(c, pilaBucle.getTop(), wleft + 4);

                    cuentaWhile++;
                    saltarEtiqueta("BUCLE", pilaBucle.getTop());
                    ponerEtiqueta("FINBUCLE", pilaBucle.getTop());
                    pilaBucle.pop();
                    RESULT = b;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SentWhile",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SentAsignacion ::= ID ASIGNAR Expresion PTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        if (!table.checkInt(id)){
                        parser.error(Textos.simboloNoDeclarado);
                        }else{
                            System.out.println("id2");
                            asignacion(id, e);
                            RESULT = e;
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SentAsignacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SentPutw ::= PUTW LPAREN Expresion RPAREN PTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                        System.out.println("putw");
                        imprimirW(e);
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SentPutw",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SentPuts ::= PUTS LPAREN CADENATEXTO RPAREN PTOCOMA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        System.out.println("puts");
                        cuentaCadenas++;
                        imprimirS(c, cuentaCadenas);
                        RESULT = c;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SentPuts",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SentBreak ::= BREAK PTOCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
                        cuentaWhile--;
                        if (cuentaWhile>0){
                        } else {
                            parser.error(Textos.breakSinWhile);
                        }
                        RESULT = b;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SentBreak",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Sentencia ::= SentIf 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = s;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Sentencia ::= SentWhile 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = s;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Sentencia ::= SentAsignacion 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = s;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Sentencia ::= SentPutw 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = s;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Sentencia ::= SentPuts 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = s;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Sentencia ::= SentBreak 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = s;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Sentencia ::= ID LPAREN RPAREN PTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                if (table.checkFuncion(id)){
                    llamada(id);
                }else{
                    System.err.println("Error: La funcion no se encuentra");
                }
                RESULT = id;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
