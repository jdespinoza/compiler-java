/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Grammar.Document;
import LexicalAnalyzer.Parser;
import LexicalAnalyzer.Yylex;
import java.awt.event.ActionListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.filechooser.FileNameExtensionFilter;


public class Main extends javax.swing.JFrame implements ActionListener, MouseListener, KeyListener {

    private FileNameExtensionFilter filter = new FileNameExtensionFilter("C-0 Files [.c0]", "c0");
    private Map<String, String> listPaths;
    private String resConsole;
    private String resLexer;
    private String resTable;
    

    public Main() {
        initComponents();
        this.listPaths = new HashMap<String, String>();
        this.setLocationRelativeTo(null);
        _start();
    }

    private void compileFile(){
                
        try {
            int index = jTabFiles.getSelectedIndex();
            String file = listPaths.get(jTabFiles.getTitleAt(index));    

            String reporte = "";
            FileInputStream f = new FileInputStream( file );
            Yylex lexer = new Yylex( f );
            Parser p = new Parser( lexer );
            p.setTable();// instancia la tabla
            p.parse();

            if( p.getSuccess() ) {
              reporte += "Parser sin problemas\n";
              Document resultado = p.getDocument();
              reporte += resultado.printReport();

              //copia el resultado para variables globales de Terminal
              this.resConsole = reporte;
              this.resLexer = lexer.printListLexer();
              this.resTable = p.table.printSymbolTable();
              //muestra en Terminal los resultados
              auxjButton1ActionPerformed();
            }else{
                reporte += "Problema con el parser";
                //copia el resultado para consola
                this.resConsole = reporte;
                this.resLexer = lexer.printListLexer();
                this.resTable = p.table.printSymbolTable();

                //muestra en Terminal los resultados
              auxjButton1ActionPerformed();
            }
      } catch (Exception ex) {
           JOptionPane.showMessageDialog(null,
                      "Problema con la compilaci√≥n.",
                          " Error",JOptionPane.INFORMATION_MESSAGE);
      } finally {
      }

    }
        
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jFileChooser1 = new javax.swing.JFileChooser();
        jTabFiles = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jTabsTerminal = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanelTerminalConsole = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanelTerminalFlex = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        jPanelTerminalTable = new javax.swing.JTextPane();
        jBtnCompile = new javax.swing.JButton();
        jBtnNewFile = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemNewFile = new javax.swing.JMenuItem();
        jMenuItemOpenFile = new javax.swing.JMenuItem();
        jMenuItemSave = new javax.swing.JMenuItem();
        jMenuItemSaveAs = new javax.swing.JMenuItem();
        jMenuItemCloseFile = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        jFileChooser1.addActionListener(this);

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IDLE");
        setPreferredSize(new java.awt.Dimension(1228, 850));

        jTabFiles.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTabFiles.setAutoscrolls(true);
        jTabFiles.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTabFiles.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTabFiles.addKeyListener(this);

        jTree1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.setToolTipText("");
        jTree1.setAutoscrolls(true);
        jTree1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTree1.setVerifyInputWhenFocusTarget(false);
        jScrollPane1.setViewportView(jTree1);

        jTabsTerminal.addMouseListener(this);

        jPanelTerminalConsole.setEditable(false);
        jPanelTerminalConsole.setToolTipText("");
        jScrollPane3.setViewportView(jPanelTerminalConsole);

        jTabsTerminal.addTab("Console", jScrollPane3);

        jPanelTerminalFlex.setEditable(false);
        jPanelTerminalFlex.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelTerminalFlex.setMargin(new java.awt.Insets(5, 3, 5, 3));
        jScrollPane4.setViewportView(jPanelTerminalFlex);

        jTabsTerminal.addTab("Flex", jScrollPane4);

        jPanelTerminalTable.setEditable(false);
        jPanelTerminalTable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane5.setViewportView(jPanelTerminalTable);

        jTabsTerminal.addTab("Symbol Table", jScrollPane5);

        jBtnCompile.setText("Compile");
        jBtnCompile.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jBtnCompile.addActionListener(this);

        jBtnNewFile.setText("New File");
        jBtnNewFile.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jBtnNewFile.addActionListener(this);

        jMenu1.setText("File");

        jMenuItemNewFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemNewFile.setText("New File");
        jMenuItemNewFile.addActionListener(this);
        jMenu1.add(jMenuItemNewFile);

        jMenuItemOpenFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemOpenFile.setText("Open File");
        jMenuItemOpenFile.addActionListener(this);
        jMenu1.add(jMenuItemOpenFile);

        jMenuItemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSave.setText("Save");
        jMenuItemSave.addActionListener(this);
        jMenu1.add(jMenuItemSave);

        jMenuItemSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSaveAs.setText("Save as");
        jMenuItemSaveAs.addActionListener(this);
        jMenu1.add(jMenuItemSaveAs);

        jMenuItemCloseFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemCloseFile.setText("Close File");
        jMenuItemCloseFile.addActionListener(this);
        jMenu1.add(jMenuItemCloseFile);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(this);
        jMenu1.add(jMenuItemExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Run");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Compile");
        jMenuItem1.addActionListener(this);
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBtnCompile, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBtnNewFile, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabFiles, javax.swing.GroupLayout.DEFAULT_SIZE, 993, Short.MAX_VALUE))
            .addComponent(jSeparator1)
            .addComponent(jTabsTerminal)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBtnCompile, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                            .addComponent(jBtnNewFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jTabFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabsTerminal, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == jBtnCompile) {
            Main.this.jBtnCompileActionPerformed(evt);
        }
        else if (evt.getSource() == jBtnNewFile) {
            Main.this.jBtnNewFileActionPerformed(evt);
        }
        else if (evt.getSource() == jFileChooser1) {
            Main.this.jFileChooser1ActionPerformed(evt);
        }
        else if (evt.getSource() == jMenuItemNewFile) {
            Main.this.jMenuItemNewFileActionPerformed(evt);
        }
        else if (evt.getSource() == jMenuItemOpenFile) {
            Main.this.jMenuItemOpenFileActionPerformed(evt);
        }
        else if (evt.getSource() == jMenuItemSave) {
            Main.this.jMenuItemSaveActionPerformed(evt);
        }
        else if (evt.getSource() == jMenuItemSaveAs) {
            Main.this.jMenuItemSaveAsActionPerformed(evt);
        }
        else if (evt.getSource() == jMenuItemCloseFile) {
            Main.this.jMenuItemCloseFileActionPerformed(evt);
        }
        else if (evt.getSource() == jMenuItemExit) {
            Main.this.jMenuItemExitActionPerformed(evt);
        }
        else if (evt.getSource() == jMenuItem1) {
            Main.this.jMenuItem1ActionPerformed(evt);
        }
    }

    public void keyPressed(java.awt.event.KeyEvent evt) {
        if (evt.getSource() == jTabFiles) {
            Main.this.jTabFilesKeyPressed(evt);
        }
    }

    public void keyReleased(java.awt.event.KeyEvent evt) {
        if (evt.getSource() == jTabFiles) {
            Main.this.jTabFilesKeyReleased(evt);
        }
    }

    public void keyTyped(java.awt.event.KeyEvent evt) {
        if (evt.getSource() == jTabFiles) {
            Main.this.jTabFilesKeyTyped(evt);
        }
    }

    public void mouseClicked(java.awt.event.MouseEvent evt) {
        if (evt.getSource() == jTabsTerminal) {
            Main.this.jTabsTerminalMouseClicked(evt);
        }
    }

    public void mouseEntered(java.awt.event.MouseEvent evt) {
    }

    public void mouseExited(java.awt.event.MouseEvent evt) {
    }

    public void mousePressed(java.awt.event.MouseEvent evt) {
    }

    public void mouseReleased(java.awt.event.MouseEvent evt) {
    }// </editor-fold>//GEN-END:initComponents

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        //escoger un archivo para abrir
        JFileChooser openFile = (JFileChooser) evt.getSource();
        String command = evt.getActionCommand();
        if (command.equals(JFileChooser.APPROVE_SELECTION)){
            File newFile = openFile.getSelectedFile();
        }
        
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    private void manageFiles(File[] files){
        for (File file : files) {
            JTextPane textArea = new JTextPane();
            jTabFiles.addTab(file.getName(), textArea);
        }
    }
    
    private void _start(){
        JTextPane textArea = new JTextPane();
        jTabFiles.addTab("File*", textArea);
    }
    
    private void jMenuItemOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenFileActionPerformed
        JFileChooser openFile = new JFileChooser();
        openFile.setFileFilter(filter);
        int option = openFile.showOpenDialog(this);
        if(option == JFileChooser.APPROVE_OPTION){
            
            File file = openFile.getSelectedFile();
            JTextPane textArea = new JTextPane();
            //JScrollPane jScrollPane = new JScrollPane();
            //jScrollPane.setAutoscrolls(true);
            
            //jScrollPane.setViewportView(textArea);

            try {
                FileReader read = new FileReader(file.getPath());
                BufferedReader b = new BufferedReader(read);
                String text = "";
                String aux;
                while((aux = b.readLine())!=null) {
                    text += aux + "\n";
                }
                b.close();
                textArea.setText(text);
                
                /* Se guarda el path del archivo abierto */
                listPaths.put(file.getName(), file.getPath());
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            //jScrollPane.setViewportView(textArea);
            //jScrollPane.setViewportView(textArea);
            //jScrollPane.setViewportView(textArea);
            //jScrollPane.setViewportView(textArea);
            //jScrollPane.setViewportView(textArea);
            //jScrollPane.setViewportView(textArea);
            //jScrollPane.setViewportView(textArea);
            //jScrollPane.setViewportView(textArea);
            
            jTabFiles.addTab(file.getName(), textArea);
            //manageFiles(files);
        }
    }//GEN-LAST:event_jMenuItemOpenFileActionPerformed

    private void jMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveActionPerformed
        try{
            int index = jTabFiles.getSelectedIndex();
            String name = jTabFiles.getTitleAt(index);
            
            //si existe
            if(listPaths.get(name)!= null){
                String path = listPaths.get(name);
                JTextPane textArea = (JTextPane) jTabFiles.getComponent(index);
                FileWriter  save = new FileWriter(path);
                save.write(textArea.getText());
                save.close();
                JOptionPane.showMessageDialog(null,
                         "El archivo se a guardado Exitosamente",
                             "Informaci√≥n",JOptionPane.INFORMATION_MESSAGE);

            }
            //si no existe lo salva
            else{
                JFileChooser file = new JFileChooser();//ventana de busqueda en Documentos
                file.showSaveDialog(this);
                File saveFile = file.getSelectedFile();
                if(saveFile != null){
                    JTextPane textArea = (JTextPane) jTabFiles.getComponent(index);
                    /** Si queremos que se guarde en algun formato lo definimos.
                     * Ejemplo: *.doc*/
                    FileWriter  save = new FileWriter(saveFile);
                    save.write(textArea.getText());
                    save.close();
                    jTabFiles.setTitleAt(index, saveFile.getName());
                    JOptionPane.showMessageDialog(null,
                         "El archivo se a guardado Exitosamente",
                             "Informaci√≥n",JOptionPane.INFORMATION_MESSAGE);
                    /* Se guarda el path del archivo guardado */
                    listPaths.put(saveFile.getName(), saveFile.getPath());
                }
            }
            
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null,
               "Su archivo no se ha guardado",
                  "Advertencia",JOptionPane.WARNING_MESSAGE);
        }
        /**
        try{
            JFileChooser file = new JFileChooser();
            file.showSaveDialog(this);
            File saveFile =file.getSelectedFile();
            if(saveFile !=null){
                int index = jTabFiles.getSelectedIndex();
                JTextPane textArea = (JTextPane) jTabFiles.getComponent(index);
                /** Si queremos que se guarde en algun formato lo definimos.
                 * Ejemplo: *.doc*/
        /**
                 FileWriter  save = new FileWriter(saveFile);
                 save.write(textArea.getText());
                 save.close();
                 jTabFiles.setTitleAt(index, saveFile.getName());
                 JOptionPane.showMessageDialog(null,
                      "El archivo se a guardado Exitosamente",
                          "Informaci√≥n",JOptionPane.INFORMATION_MESSAGE);
                 /* Se guarda el path del archivo guardado */
        /**         listPaths.put(saveFile.getName(), saveFile.getPath());
            }
        }
         catch(IOException ex){
          JOptionPane.showMessageDialog(null,
               "Su archivo no se ha guardado",
                  "Advertencia",JOptionPane.WARNING_MESSAGE);
         }**/
    }//GEN-LAST:event_jMenuItemSaveActionPerformed

    private void jMenuItemNewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewFileActionPerformed
        JTextPane textArea = new JTextPane();
        jTabFiles.addTab("File*", textArea);
        
    }//GEN-LAST:event_jMenuItemNewFileActionPerformed

    private void jMenuItemCloseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCloseFileActionPerformed
        try{
            int index = jTabFiles.getSelectedIndex();
            String name = jTabFiles.getTitleAt(index);
            //System.out.println(this.listPaths.get(name));
            /*Si no se guardo el archivo se perdera la informacion escrita*/
            if(listPaths.get(name) == null 
                    && !((JTextPane)jTabFiles.getComponentAt(index)).getText().isEmpty()){
                JOptionPane.showMessageDialog(null,
               "No ha guardado el texto",
                  "Advertencia",JOptionPane.WARNING_MESSAGE);
            }else{
                this.listPaths.remove(name);
                jTabFiles.remove(index);
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,
               "Problemas para cerrar el archivo",
                  "Advertencia",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemCloseFileActionPerformed

    private void auxjButton1ActionPerformed(){
        //muestra el resultado en terminal
          jPanelTerminalConsole.setText(resConsole);
          jPanelTerminalFlex.setText(resLexer);
          jPanelTerminalTable.setText(resTable);
    }
    private void jBtnCompileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCompileActionPerformed
        compileFile();
    }//GEN-LAST:event_jBtnCompileActionPerformed

    private void jTabsTerminalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabsTerminalMouseClicked
        /*int index = jTabsTerminal.getSelectedIndex();
        
        try{
            switch(index){
                case 0://Cuando selecciona Console
                    jPanelTerminalConsole.setText(resConsole);
                    break;
                case 1://cuando selecciona Lexer
                    jPanelTerminalFlex.setText(resLexer);
                    
                    break;
                case 2://cuando selecciona Table
                    jPanelTerminalTable.setText(resTable);
                    break;
                default:
                    break;
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null,
               "Ocurrio un error en el programa.\n"
                       + "Vuelva a intentar.",
                  "Advertencia",JOptionPane.WARNING_MESSAGE);
        } */       
    }//GEN-LAST:event_jTabsTerminalMouseClicked

    private void jMenuItemSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveAsActionPerformed
                
        try{
            JFileChooser file = new JFileChooser();
            file.showSaveDialog(this);
            File saveFile =file.getSelectedFile();
            if(saveFile !=null){
                int index = jTabFiles.getSelectedIndex();
                JTextPane textArea = (JTextPane) jTabFiles.getComponent(index);
                /** Si queremos que se guarde en algun formato lo definimos.
                 * Ejemplo: *.doc*/
                 FileWriter  save = new FileWriter(saveFile);
                 save.write(textArea.getText());
                 save.close();
                 jTabFiles.setTitleAt(index, saveFile.getName());
                 JOptionPane.showMessageDialog(null,
                      "El archivo se a guardado Exitosamente",
                          "Informaci√≥n",JOptionPane.INFORMATION_MESSAGE);
                 /* Se guarda el path del archivo guardado */
                 listPaths.put(saveFile.getName(), saveFile.getPath());
            }
        }
         catch(IOException ex){
          JOptionPane.showMessageDialog(null,
               "Su archivo no se ha guardado",
                  "Advertencia",JOptionPane.WARNING_MESSAGE);
         }

    }//GEN-LAST:event_jMenuItemSaveAsActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jBtnNewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnNewFileActionPerformed
        JTextPane textArea = new JTextPane();
        jTabFiles.addTab("File*", textArea);
    }//GEN-LAST:event_jBtnNewFileActionPerformed

    private void jTabFilesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTabFilesKeyPressed

            

    }//GEN-LAST:event_jTabFilesKeyPressed

    private void jTabFilesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTabFilesKeyReleased
            
    }//GEN-LAST:event_jTabFilesKeyReleased

    private void jTabFilesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTabFilesKeyTyped
            
    }//GEN-LAST:event_jTabFilesKeyTyped

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        compileFile();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnCompile;
    private javax.swing.JButton jBtnNewFile;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemCloseFile;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemNewFile;
    private javax.swing.JMenuItem jMenuItemOpenFile;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JMenuItem jMenuItemSaveAs;
    private javax.swing.JTextPane jPanelTerminalConsole;
    private javax.swing.JTextPane jPanelTerminalFlex;
    private javax.swing.JTextPane jPanelTerminalTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabFiles;
    private javax.swing.JTabbedPane jTabsTerminal;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
